#!/usr/bin/env perl

use strict;
use warnings;

my @allowed = (

    # virsh + virt-manager themselves
    'sh -c \'if \'nc\' -q 2>&1 | grep "requires an argument" >/dev/null 2>&1; then ARG=-q0;else ARG=;fi;\'nc\' $ARG -U /var/run/libvirt/libvirt-sock\'',
    'sh -c \'if \'nc\' -q 2>&1 | grep "requires an argument" >/dev/null 2>&1; then ARG=-q0;else ARG=;fi;\'nc\' $ARG -U /var/run/libvirt/libvirt-sock\'',

    # graphical connections
    # FIXME: very bad hack + a security problem:
    #   alles any user (who can use virt-access) to open a graphical console to any VM.
    #   we *should* inspect the domain xml and check if the user may connect to that port.
    #   also, obviously pretty bad case of code duplication and whitelisting a few known-required cases.
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5900";else   CMD="nc 127.0.0.1 5900";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5901";else   CMD="nc 127.0.0.1 5901";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5902";else   CMD="nc 127.0.0.1 5902";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5903";else   CMD="nc 127.0.0.1 5903";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5904";else   CMD="nc 127.0.0.1 5904";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5905";else   CMD="nc 127.0.0.1 5905";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5906";else   CMD="nc 127.0.0.1 5906";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5907";else   CMD="nc 127.0.0.1 5907";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5908";else   CMD="nc 127.0.0.1 5908";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5909";else   CMD="nc 127.0.0.1 5909";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5910";else   CMD="nc 127.0.0.1 5910";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5911";else   CMD="nc 127.0.0.1 5911";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5912";else   CMD="nc 127.0.0.1 5912";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5913";else   CMD="nc 127.0.0.1 5913";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5914";else   CMD="nc 127.0.0.1 5914";fi;eval "$CMD";\'',
    'sh -c \'nc -q 2>&1 | grep "requires an argument" >/dev/null;if [ $? -eq 0 ] ; then   CMD="nc -q 0 127.0.0.1 5915";else   CMD="nc 127.0.0.1 5915";fi;eval "$CMD";\'',
);

my $ssh_original_command = $ENV{"SSH_ORIGINAL_COMMAND"} || "";
my $ssh_user = ($ENV{"USER"} || "");
$ssh_user =~ s/[^A-Za-z0-9\-\.]//g;

open(my $fh, '>>', "/tmp/virt-${ssh_user}-access.log") or die "failed to open log file";
say $fh "[" . $ssh_original_command . "]";
close $fh;

if ($ssh_original_command eq '') {
    print STDERR "This account can be used with libvirt only.\n";
    print STDERR "Use virsh or virt-manager.\n";
    exit(1);
}

if (not $ssh_original_command ~~ @allowed) {
    print STDERR "This command is not allowed. Use virsh or virt-manager to connect.\n";
    print STDERR "If you were, please contact an admin to get it whitelisted.\n";
    exit(1);
}

exec $ssh_original_command;

